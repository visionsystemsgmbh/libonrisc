#ifndef _ONRISC_H_
#define _ONRISC_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <pthread.h>
#include <stdint.h>
#include <sys/time.h>
#include <linux/serial.h>
#include <libsoc_gpio.h>

#define LIBONRISC_VERSION "@CPACK_PACKAGE_VERSION_MAJOR@.@CPACK_PACKAGE_VERSION_MINOR@.@CPACK_PACKAGE_VERSION_PATCH@"

#define ONRISC_MAX_GPIOS        32
#define ONRISC_MAX_UARTS        64
#define ONRISC_MAX_LEDS        	64
#define ONRISC_MAX_DIPS	        32

/** @name Hardware parameter stuff */
/*@{*/
#define PARTITION_REDBOOT	"/dev/mtdblock1"	//!< RedBoot partition device
#define PARTITION_REDBOOT_SIZE	0x10000			//!< Flash size
#define GLOBAL_MAGIC		0xDEADBEEF		//!< Magic number
/*@}*/

#define ALEKTO		1
#define ALENA		2
#define ALEKTO_LAN	3
#define VS860		100
#define ALEKTO2		200
#define BALTOS_IR_5221	210
#define BALTOS_IR_3220	211
#define BALTOS_DIO_1080	214
#define NETCON3		215
#define NETCOM_PLUS	220
#define NETCOM_PLUS_413	221
#define NETCOM_PLUS_811	222
#define NETCOM_PLUS_813	223
#define NETCOM_PLUS_111	224
#define NETCOM_PLUS_113	225
#define NETCOM_PLUS_211	226
#define NETCOM_PLUS_213	227
#define NETCAN		230

typedef struct {
	uint32_t flags;
	char *path;
} __attribute__ ((packed)) onrisc_eeprom_t;

#define RS_HAS_485_SW (1 << 0)
#define RS_HAS_TERMINATION (1 << 1)
#define RS_HAS_DIR_CTRL (1 << 2)
#define RS_HAS_ECHO (1 << 3)
#define RS_IS_GPIO_BASED (1 << 4)
#define RS_NEEDS_I2C_ADDR (1 << 5)
#define RS_IS_SETUP (1 << 6)

/** @name DIP switch structure */
/*@{*/
typedef struct {
	uint8_t num; /*!< number of pins in one switch */
	gpio *gpio[32]; /*!< libsoc GPIO array for each pin */
	uint32_t pin[32]; /*!< an array with pin numbers for each pin */
	uint32_t flags; /*!< DIP switch flags */
	uint8_t i2c_id; /*!< I2C ID for I2C GPIO expander attached switches */
} __attribute__ ((packed)) onrisc_dip_switch_t;
/*@}*/

typedef struct {
	uint32_t num;
	onrisc_dip_switch_t ctrl[ONRISC_MAX_UARTS];
} __attribute__ ((packed)) onrisc_uart_caps_t;

typedef struct {
	uint32_t num;
	onrisc_dip_switch_t dip_switch[ONRISC_MAX_DIPS];
} __attribute__ ((packed)) onrisc_dip_caps_t;

#define WLAN_SW_IS_SETUP (1 << 0)

typedef struct {
	uint32_t flags; /*!< WLAN switch flags */
	uint32_t pin;
	gpio *gpio;
} __attribute__ ((packed)) onrisc_wlan_sw_caps_t;

#define LED_IS_HIGH_ACTIVE (1 << 0)
#define LED_IS_GPIO_BASED (1 << 1)
#define LED_IS_AVAILABLE (1 << 2)
#define LED_NEEDS_I2C_ADDR (1 << 3)

/** @name LED hardware control structure */
/*@{*/
typedef struct {
	uint32_t pin; /*!< LED related IO pin */
	uint32_t flags; /*!< LED flags */
	uint8_t i2c_id; /*!< I2C ID for I2C GPIO expander attached LEDs */
} __attribute__ ((packed)) onrisc_led_t;
/*@}*/

typedef struct {
	uint32_t num;
	onrisc_led_t led[ONRISC_MAX_LEDS];
} __attribute__ ((packed)) onrisc_led_caps_t;

typedef struct {
	uint8_t direction;
	uint8_t value;
	uint8_t dir_fixed;
	gpio *pin;
} __attribute__ ((packed)) onrisc_gpio_t;

typedef struct {
	int ngpio;
	int base;
	onrisc_gpio_t gpios[ONRISC_MAX_GPIOS];
	onrisc_gpio_t gpios_ctrl[6];
} __attribute__ ((packed)) onrisc_gpios_int_t;

typedef struct  {
	uint32_t mask;
	uint32_t value;
} __attribute__ ((packed)) onrisc_gpios_t;

typedef struct {
	onrisc_gpios_int_t *gpios;
	onrisc_uart_caps_t *uarts;
	onrisc_dip_caps_t *dips;
	onrisc_led_caps_t *leds;
	onrisc_wlan_sw_caps_t *wlan_sw;
} __attribute__ ((packed)) onrisc_capabilities_t;

enum rs_mode {TYPE_UNKNOWN, TYPE_RS232, TYPE_RS422, TYPE_RS485_FD, TYPE_RS485_HD, TYPE_LOOPBACK, TYPE_DIP, TYPE_CAN};

enum dir_ctrl {DIR_ART, DIR_RTS};

typedef struct {
	uint32_t rs_mode;
	uint32_t termination;
	uint32_t dir_ctrl;
	uint32_t echo;
} __attribute__ ((packed)) onrisc_uart_mode_t;

typedef struct {
	uint16_t model;	
	uint32_t hw_rev;
	uint32_t ser_nr;
	char prd_date[11];
	uint8_t mac1[6];
	uint8_t mac2[6];
	uint8_t mac3[6];
} __attribute__ ((packed)) onrisc_system_t;

//! @brief Hardware parameter stored in flash
//!
//! This struct lies at the end of the prebootloaders
//! partition. It is build from top (highest addr)
//! to down -> magic lies at the last address of the
//! partition.
struct _param_hw		// v1.0
{
	uint8_t pad[1];
	uint16_t szram;		//!< direct in MB
	uint16_t szflash2;
	uint16_t szflash1;	//!< direct in MB
	uint8_t mac2[6];		//!< MAC address for the second interface
	uint8_t mac1[6];		//!< MAC address for the first interface
	uint16_t biosid;		//!< BIOS ID to distinguish between various OnRISC products
	char prddate[11];	//!< as a string ie. "01.01.2006"
	uint32_t serialnr;		//!< Serial number
	uint32_t hwrev;		//!< Hardware revision
	uint32_t magic;
} __attribute__ ((packed));

typedef struct _BSP_VS_HWPARAM    // v1.0
{
	uint32_t Magic;
	uint32_t HwRev;
	uint32_t SerialNumber;
	char PrdDate[11];    // as a string ie. "01.01.2006"
	uint16_t SystemId;
	uint8_t MAC1[6];        // internal EMAC
	uint8_t MAC2[6];        // SMSC9514
	uint8_t MAC3[6];        // WL1271 WLAN
} __attribute__ ((packed)) BSP_VS_HWPARAM; 

/* Definition for KS8695 based devices */

#define LED_POWER				0x01	//!< power LED red
#define LED_WLAN				0x02	//!< WLAN LED blue
#define LED_APP					0x04	//!< LED green
#define LED_BTN_WLAN				0x08	//!< LED button wlan (Arete)

#define DIP_S1					0x01
#define DIP_S2					0x02
#define DIP_S3					0x04
#define DIP_S4					0x08

struct epld_struct
{
	unsigned long port;
	unsigned long reg_shift;
	unsigned char value;
};

struct gpio_struct
{
	unsigned long mask;
	unsigned long value;
};

typedef struct
{
	struct timeval interval;	/**< time for complete cycles (high and low phase) */
	struct timeval high_phase;	/**< high phase duration */
	uint32_t led_type;		/**< LED type: power led, user led etc. */
	int32_t count;			/**< number of cycles or -1 for infinite */

	/* internal fields */
	pthread_t thread_id;
	gpio *led;
	int fd;
	unsigned long leds_old;
} blink_led_t;

/* prototypes */

/**
 * @brief get system, hardware parameters etc.
 * @param data pointer to the structure, where system data will be stored
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_init(onrisc_system_t *data);

/**
 * @brief get device capabilities structure
 * @return device capabilities structure
 */
onrisc_capabilities_t *onrisc_get_dev_caps(void);

/**
 * @brief show content of the internal onrisc_system_t structure
 */
void onrisc_print_hw_params();

/**
 * @brief read content of onrisc_system_t structure from EEPROM/NOR
 * @param data pointer to the structure, where system data will be stored
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_read_hw_params(onrisc_system_t * data);

/**
 * @brief write content of onrisc_system_t structure back to EEPROM/NOR
 * @param data pointer to the structure, where system data is stored
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_write_hw_params(onrisc_system_t * data);

/**
 * @brief init blinker structure
 * @param blinker blink_led structure
 */
void onrisc_blink_create(blink_led_t *blinker);

/**
 * @brief free blinker's internal elements
 * @param blinker blink_led structure
 */
void onrisc_blink_destroy(blink_led_t *blinker);

/**
 * @brief start blinking thread
 * @param blinker blink_led structure
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_blink_led_start(blink_led_t *blinker);

/**
 * @brief cancel blinking thread and free GPIO
 * @param blinker blink_led structure
 * @todo send signal to the blinking thread and make cleanup only there
 */
int onrisc_blink_led_stop(blink_led_t *blinker);

/**
 * @brief turn LED on/off
 * @param led blink_led structure
 * @param state 0 - off, 1 - on
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_switch_led(blink_led_t *led, uint8_t state);

/**
 * @brief set UART's mode like RS232/RS422/RS485 and termination
 * @param port_nr port number, i.e. 1 - for /dev/ttyS1 or /dev/sertest0
 * @param mode pointer to onrisc_uart_mode_t describing UART's mode: RS-modes
 * termination, echo and direction control
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_set_uart_mode(int port_nr, onrisc_uart_mode_t *mode);

/**
 * @brief get DIP switches values
 * @param dips variable to hold the DIP switches value
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_get_dips(uint32_t *dips);

/**
 * @brief change GPIO direction
 * @param gpio_dir pointer to a structure holding mask and direction values for all GPIOs
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_gpio_set_direction(onrisc_gpios_t * gpio_dir);

/**
 * @brief get GPIO direction
 * @param gpio_dir pointer to a structure holding dir_fixed as mask and direction values for all GPIOs
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_gpio_get_direction(onrisc_gpios_t * gpio_dir);

/**
 * @brief change GPIO output value
 * @param gpio_dir pointer to a structure holding mask and values for all outputs
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_gpio_set_value(onrisc_gpios_t * gpio_val);

/**
 * @brief get GPIO value for both inputs and outputs
 * @param gpio_dir pointer to a structure, that will return GPIO value in the value field
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_gpio_get_value(onrisc_gpios_t * gpio_val);

/**
 * @brief get the number of GPIOs
 * @return number of GPIOs
 */
int onrisc_gpio_get_number();

/**
 * @brief write to MDIO register
 * @param phy_id PHY ID
 * @param reg PHY's register
 * @param val value to write to the register
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_write_mdio_reg(int phy_id, int reg, int val);

/**
 * @brief read from MDIO register
 * @param phy_id PHY ID
 * @param reg PHY's register
 * @param val value to read from the register
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_read_mdio_reg(int phy_id, int reg, int *val);

/**
 * @brief read WLAN switch level
 * @param state WLAN switch level: HIGH, LOW or LEVEL_ERROR
 * @return EXIT_SUCCESS or EXIT_FAILURE
 */
int onrisc_get_wlan_sw_state(gpio_level *state);

#ifdef __cplusplus
}
#endif

#endif	/*_ONRISC_H_ */
